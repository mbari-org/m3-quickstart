version: "3.0"
services:

  # derby:
  #   build: derby/.
  #   image: m3/derby
  #   ports:
  #     - "1527:1527"
  #   volumes:
  #     - ${M3_HOST_DIR}/derby:/dbs
  #   networks:
  #     - m3

  # sqlserver:
  #   image: mcr.microsoft.com/mssql/server
  #   # image: mcr.microsoft.com/azure-sql-edge
  #   restart: always
  #   ports:
  #     - "1433:1433"
  #   environment: 
  #     - ACCEPT_EULA=Y
  #     - MSSQL_PID=Express
  #     - SA_PASSWORD=${ANNOSAURUS_DATABASE_PASSWORD}
  #   volumes:
  #     - ${M3_HOST_DIR}/sqlserver:/var/opt/mssql
  #   networks: 
  #     - m3

  # Postgres:14.5 (latest) does not work. See https://github.com/mbari-org/m3-quickstart/issues/8#issuecomment-1260233442
  postgres:
    image: postgres:14
    restart: always
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=${M3_JDBC_USER}
      - POSTGRES_PASSWORD=${M3_JDBC_PWD}
      - POSTGRES_DB=${DATABASE_NAME}
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - ${M3_HOST_DIR}/postgres:/var/lib/postgresql/data
      - ${BASE_DIR}/docker/postgres/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d
      - ${BASE_DIR}/docker/postgres/my-postgres.conf:/etc/postgresql/postgresql.conf
    networks:
      - m3

  nginx:
    build: nginx/.
    image: m3/nginx
    restart: always
    ports:
      - "80:80"
    volumes:
      - ${M3_HOST_DIR}/media:/usr/local/nginx/html/media
      - ${M3_HOST_DIR}/framegrabs:/usr/local/nginx/html/framegrabs
    networks:
      - m3
    depends_on:
      - annosaurus
      - charybdis
      - panoptes
      - raziel
      - vampire-squid
      - vars-kb-server
      - vars-user-server

  annosaurus:
    image: mbari/annosaurus
    restart: always
    ports:
      - "${ANNOSAURUS_PORT}:8080"
      - "${ANNOSAURUS_ZEROMQ_PORT}:5563"
    environment:
      - AUTHENTICATION_SERVICE=org.mbari.vars.annotation.auth.BasicJwtService
      - BASICJWT_CLIENT_SECRET=${ANNOSAURUS_CLIENT_SECRET}
      - BASICJWT_ISSUER=${JWT_ISSUER}
      - BASICJWT_SIGNING_SECRET=${ANNOSAURUS_SIGNING_SECRET}
      - DATABASE_ENVIRONMENT=production
      - DATABASE_LOG_LEVEL=FINE
      - HTTP_CONTEXT_PATH=${ANNOSAURUS_HTTP_CONTEXT_PATH}
      - LOGBACK_LEVEL=${LOGBACK_LEVEL}
      - MESSAGING_ZEROMQ_ENABLE=${ANNOSAURUS_ZEROMQ_ENABLE}
      - MESSAGING_ZEROMQ_PORT=${ANNOSAURUS_ZEROMQ_PORT}
      - MESSAGING_ZEROMQ_TOPIC=${ANNOSAURUS_ZEROMQ_TOPIC}
      - ORG_MBARI_VARS_ANNOTATION_DATABASE_PRODUCTION_DRIVER=${ANNOSAURUS_DATABASE_DRIVER}
      - ORG_MBARI_VARS_ANNOTATION_DATABASE_PRODUCTION_NAME=${ANNOSAURUS_DATABASE_NAME}
      - ORG_MBARI_VARS_ANNOTATION_DATABASE_PRODUCTION_PASSWORD=${ANNOSAURUS_DATABASE_PASSWORD}
      - ORG_MBARI_VARS_ANNOTATION_DATABASE_PRODUCTION_URL=${ANNOSAURUS_DATABASE_URL}
      - ORG_MBARI_VARS_ANNOTATION_DATABASE_PRODUCTION_USER=${ANNOSAURUS_DATABASE_USER}
    depends_on:
      - postgres
    networks:
      - m3

  panoptes:
    image: mbari/panoptes
    restart: always
    ports:
      - "${PANOPTES_PORT}:8080" # PAN_APP_PORT needs to match the one in nginx.conf
    volumes:
      - ${M3_HOST_DIR}/framegrabs:${PANOPTES_ROOT_DIRECTORY}
    environment:
      - AUTHENTICATION_SERVICE=org.mbari.m3.panoptes.auth.BasicJwtService
      - BASICJWT_CLIENT_SECRET=${PANOPTES_CLIENT_SECRET}
      - BASICJWT_JWT_ISSUER=${JWT_ISSUER}
      - BASICJWT_SIGNING_SECRET=${PANOPTES_SIGNING_SECRET}
      - HTTP_CONTEXT_PATH=${PANOPTES_HTTP_CONTEXT_PATH}
      - LOGBACK_LEVEL=${LOGBACK_LEVEL}
      - PANOPTES_FILE_ARCHIVER=${PANOPTES_FILE_ARCHIVER}
      - PANOPTES_MBARI_IMAGE_ARCHIVE_ROOT=${PANOPTES_ROOT_DIRECTORY}
      - PANOPTES_MBARI_IMAGE_ARCHIVE_URL=${PANOPTES_ROOT_URL}
    networks:
      - m3


  vampire-squid:
    image: mbari/vampire-squid
    restart: always
    ports:
      - "${VAMPIRESQUID_PORT}:8080"
    environment:
      - AUTHENTICATION_SERVICE=org.mbari.vars.vam.auth.BasicJwtService
      - BASICJWT_CLIENT_SECRET=${VAMPIRESQUID_CLIENT_SECRET}
      - BASICJWT_ISSUER=${JWT_ISSUER}
      - BASICJWT_SIGNING_SECRET=${VAMPIRESQUID_SIGNING_SECRET}
      - DATABASE_ENVIRONMENT=production
      - HTTP_CONTEXT_PATH=${VAMPIRESQUID_HTTP_CONTEXT_PATH}
      - LOGBACK_LEVEL=${LOGBACK_LEVEL}
      - ORG_MBARI_VARS_VAM_DATABASE_PRODUCTION_DRIVER=${VAMPIRESQUID_DATABASE_DRIVER}
      - ORG_MBARI_VARS_VAM_DATABASE_PRODUCTION_NAME=${VAMPIRESQUID_DATABASE_NAME}
      - ORG_MBARI_VARS_VAM_DATABASE_PRODUCTION_PASSWORD=${VAMPIRESQUID_DATABASE_PASSWORD}
      - ORG_MBARI_VARS_VAM_DATABASE_PRODUCTION_URL=${VAMPIRESQUID_DATABASE_URL}
      - ORG_MBARI_VARS_VAM_DATABASE_PRODUCTION_USER=${VAMPIRESQUID_DATABASE_USER}
    depends_on:
      - postgres
    networks:
      - m3

  vars-kb-server:
    image: mbari/vars-kb-server
    restart: always
    ports:
      - "${VARS_KBSERVER_PORT}:8080"
    environment:
      - DATABASE_ALLOW_INIT=${VARS_KBSERVER_DATABASE_ALLOW_INIT}
      - DATABASE_ENVIRONMENT=production
      - HTTP_CONTEXT_PATH=${VARS_KBSERVER_HTTP_CONTEXT_PATH}
      - LOGBACK_LEVEL=${LOGBACK_LEVEL}
      - ORG_MBARI_VARS_KBSERVER_DATABASE_PRODUCTION_DRIVER=${VARS_KB_DATABASE_DRIVER}
      - ORG_MBARI_VARS_KBSERVER_DATABASE_PRODUCTION_HIKARI_TEST=${VARS_KB_DATABASE_HIKARI_TEST}
      - ORG_MBARI_VARS_KBSERVER_DATABASE_PRODUCTION_NAME=${VARS_KB_DATABASE_NAME}
      - ORG_MBARI_VARS_KBSERVER_DATABASE_PRODUCTION_PASSWORD=${VARS_KB_DATABASE_PASSWORD}
      - ORG_MBARI_VARS_KBSERVER_DATABASE_PRODUCTION_URL=${VARS_KB_DATABASE_URL}
      - ORG_MBARI_VARS_KBSERVER_DATABASE_PRODUCTION_USER=${VARS_KB_DATABASE_USER}
    depends_on:
      - postgres
    networks:
      - m3

  vars-user-server:
    image: mbari/vars-user-server
    restart: always
    ports:
      - "${VARS_USER_PORT}:8080"
    environment:
      - AUTHENTICATION_SERVICE=org.mbari.vars.userserver.auth.BasicJwtService
      - BASICJWT_CLIENT_SECRET=${VARS_USER_CLIENT_SECRET}
      - BASICJWT_ISSUER=${JWT_ISSUER}
      - BASICJWT_SIGNING_SECRET=${VARS_USER_SIGNING_SECRET}
      - DATABASE_ENVIRONMENT=production
      - HTTP_CONTEXT_PATH=${VARS_USER_HTTP_CONTEXT_PATH}
      - LOGBACK_LEVEL=${LOGBACK_LEVEL}
      - ORG_MBARI_VARS_KB_DATABASE_PRODUCTION_DRIVER=${VARS_KB_DATABASE_DRIVER}
      - ORG_MBARI_VARS_KB_DATABASE_PRODUCTION_HIKARI_TEST=${VARS_KB_DATABASE_HIKARI_TEST}
      - ORG_MBARI_VARS_KB_DATABASE_PRODUCTION_NAME=${VARS_KB_DATABASE_NAME}
      - ORG_MBARI_VARS_KB_DATABASE_PRODUCTION_PASSWORD=${VARS_KB_DATABASE_PASSWORD}
      - ORG_MBARI_VARS_KB_DATABASE_PRODUCTION_URL=${VARS_KB_DATABASE_URL}
      - ORG_MBARI_VARS_KB_DATABASE_PRODUCTION_USER=${VARS_KB_DATABASE_USER}
    depends_on:
      - postgres
    networks:
      - m3

  beholder:
    image: mbari/beholder
    restart: always
    ports:
      - "${BEHOLDER_PORT}:8080"
    environment:
      - BEHOLDER_API_KEY=${BEHOLDER_API_KEY}
      - BEHOLDER_CACHE_SIZE=${BEHOLDER_CACHE_SIZE}
      - BEHOLDER_CACHE_FREEPCT=${BEHOLDER_CACHE_FREEPCT}
    volumes:
      - ${M3_HOST_DIR}/beholder/cache:/opt/beholder/cache
    networks:
      - m3

  charybdis:
    image: mbari/charybdis
    restart: always
    ports:
      - "${CHARYBDIS_PORT}:8080"
    environment:
      - ANNOTATION_SERVICE_URL=${CHARYBDIS_ANNOSAURUS_URL}
      - ANNOTATION_SERVICE_TIMEOUT=${CHARYBDIS_ANNOSAURUS_TIMEOUT}
      - LOGBACK_LEVEL=${LOGBACK_LEVEL}
      - MEDIA_SERVICE_URL=${CHARYBDIS_VAMPIRESQUID_URL}
      - MEDIA_SERVICE_TIMEOUT=${CHARYBDIS_VAMPIRESQUID_TIMEOUT}
    networks:
      - m3
    depends_on:
      - annosaurus
      - vampire-squid

  raziel:
    image: mbari/raziel
    restart: always
    ports:
      - "${RAZIEL_PORT}:8080"
    environment:
      - RAZIEL_HTTP_CONTEXT=${RAZIEL_HTTP_CONTEXT}
      - RAZIEL_JWT_SIGNING_SECRET=${RAZIEL_JWT_SIGNING_SECRET}
      - RAZIEL_MASTER_KEY=${RAZIEL_MASTER_KEY}
      - ANNOSAURUS_INTERNAL_URL=${ANNOSAURUS_INTERNAL_URL}
      - ANNOSAURUS_SECRET=${ANNOSAURUS_CLIENT_SECRET}
      - ANNOSAURUS_TIMEOUT=${ANNOSAURUS_TIMEOUT}
      - ANNOSAURUS_URL=${ANNOSAURUS_URL}
      - BEHOLDER_INTERNAL_URL=${BEHOLDER_INTERNAL_URL}
      - BEHOLDER_SECRET=${BEHOLDER_API_KEY}
      - BEHOLDER_TIMEOUT=${BEHOLDER_TIMEOUT}
      - BEHOLDER_URL=${BEHOLDER_URL}
      - CHARYBDIS_INTERNAL_URL=${CHARYBDIS_INTERNAL_URL}
      - CHARYBDIS_URL=${CHARYBDIS_URL}
      - LOGBACK_LEVEL=${LOGBACK_LEVEL}
      - PANOPTES_INTERNAL_URL=${PANOPTES_INTERNAL_URL}
      - PANOPTES_SECRET=${PANOPTES_CLIENT_SECRET}
      - PANOPTES_URL=${PANOPTES_URL}
      - VAMPIRE_SQUID_INTERNAL_URL=${VAMPIRE_SQUID_INTERNAL_URL}
      - VAMPIRE_SQUID_SECRET=${VAMPIRESQUID_CLIENT_SECRET}
      - VAMPIRE_SQUID_URL=${VAMPIRE_SQUID_URL}
      - VARS_KB_SERVER_INTERNAL_URL=${VARS_KB_SERVER_INTERNAL_URL}
      - VARS_KB_SERVER_URL=${VARS_KB_SERVER_URL}
      - VARS_USER_SERVER_INTERNAL_URL=${VARS_USER_SERVER_INTERNAL_URL}
      - VARS_USER_SERVER_SECRET=${VARS_USER_CLIENT_SECRET}
      - VARS_USER_SERVER_URL=${VARS_USER_SERVER_URL}
    networks:
      - m3
    depends_on:
      - annosaurus
      - beholder
      - charybdis
      - panoptes
      - vampire-squid
      - vars-kb-server
      - vars-user-server

networks:
  m3:
