/*
Script generated by Aqua Data Studio 22.1.2 on Feb-26-2022 11:30:37 AM
Database: M3_ANNOTATIONS
Schema: dbo
Objects: TABLE, VIEW, INDEX
*/
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";


CREATE TABLE "imaged_moments"  ( 
	"uuid"             	      uuid PRIMARY KEY NOT NULL DEFAULT uuid_generate_v4(),
	"video_reference_uuid"  	uuid NOT NULL,
	"elapsed_time_millis"   	bigint NULL,
	"recorded_timestamp"    	timestamp with time zone NULL,
	"timecode"              	varchar(255) NULL,
	"last_updated_timestamp"	timestamp NOT NULL DEFAULT now());

CREATE TABLE "ancillary_data"  ( 
	"uuid"             	          uuid PRIMARY KEY NOT NULL DEFAULT uuid_generate_v4(),
	"imaged_moment_uuid"         	uuid NOT NULL,
	"altitude"                   	real NULL,
	"coordinate_reference_system"	varchar(32) NULL,
	"depth_meters"               	real NULL,
	"latitude"                   	double precision NULL,
	"longitude"                  	double precision NULL,
	"oxygen_ml_per_l"            	real NULL,
	"phi"                        	double precision NULL,
	"xyz_position_units"         	varchar(255) NULL,
	"pressure_dbar"              	real NULL,
	"psi"                        	double precision NULL,
	"salinity"                   	real NULL,
	"temperature_celsius"        	real NULL,
	"theta"                      	double precision NULL,
	"x"                          	double precision NULL,
	"y"                          	double precision NULL,
	"z"                          	double precision NULL,
	"light_transmission"         	real NULL,
	"last_updated_timestamp"     	timestamp NOT NULL DEFAULT now(),
	CONSTRAINT fk_ancillary_data__imaged_moments 
	  FOREIGN KEY(imaged_moment_uuid) 
		REFERENCES imaged_moments("uuid"));

CREATE TABLE "observations"  ( 
	"uuid"                  	uuid PRIMARY KEY NOT NULL DEFAULT uuid_generate_v4(),
	"imaged_moment_uuid"    	uuid NOT NULL,
	"activity"              	varchar(128) NULL,
	"concept"               	varchar(256) NULL,
	"duration_millis"       	bigint NULL,
	"observation_group"     	varchar(128) NULL,
	"observation_timestamp" 	timestamp NULL,
	"observer"              	varchar(128) NULL,
	"last_updated_timestamp"	timestamp NOT NULL DEFAULT now(),
	CONSTRAINT fk_observations__imaged_moments 
	  FOREIGN KEY(imaged_moment_uuid) 
		REFERENCES imaged_moments("uuid"));

CREATE TABLE "associations"  ( 
	"uuid"             	      uuid PRIMARY KEY NOT NULL DEFAULT uuid_generate_v4(),
	"observation_uuid"      	uuid NOT NULL,
	"link_name"             	varchar(128) NOT NULL,
	"link_value"            	varchar(1024) NULL,
	"to_concept"            	varchar(128) NULL,
	"mime_type"             	varchar(64) NOT NULL,
	"last_updated_timestamp"	timestamp NOT NULL DEFAULT now(),
	CONSTRAINT fk_associations__observations 
	  FOREIGN KEY(observation_uuid) 
		REFERENCES observations("uuid"));

CREATE TABLE "image_references"  ( 
	"uuid"             	      uuid PRIMARY KEY NOT NULL DEFAULT uuid_generate_v4(),
	"imaged_moment_uuid"    	uuid NOT NULL,
	"description"           	varchar(256) NULL,
	"format"                	varchar(64) NULL,
	"height_pixels"         	integer NULL,
	"url"                   	varchar(1024) NOT NULL,
	"width_pixels"          	integer NULL,
	"last_updated_timestamp"	timestamp NOT NULL DEFAULT now(),
	UNIQUE("url"),
	CONSTRAINT fk_image_references__imaged_moments 
	  FOREIGN KEY(imaged_moment_uuid) 
		REFERENCES imaged_moments("uuid"));

CREATE TABLE "video_reference_information"  ( 
	"uuid"                  	uuid PRIMARY KEY NOT NULL DEFAULT uuid_generate_v4(),
	"video_reference_uuid"  	uuid NOT NULL,
	"mission_contact"       	varchar(64) NULL,
	"mission_id"            	varchar(256) NOT NULL,
	"platform_name"         	varchar(64) NOT NULL,
	"last_updated_timestamp"	timestamp NOT NULL DEFAULT now());


CREATE  INDEX "idx_ancillary_data__imaged_moment_uuid"
	ON "ancillary_data"("imaged_moment_uuid");

CREATE  INDEX "idx_associations__link_name"
	ON "associations"("link_name");

CREATE  INDEX "idx_associations__to_concept"
	ON "associations"("to_concept");

CREATE  INDEX "idx_associations__link_value"
	ON "associations"("link_value");

CREATE  INDEX "idx_associations__observation_uuid"
	ON "associations"("observation_uuid");

CREATE  INDEX "idx_image_references__imaged_moment_uuid"
	ON "image_references"("imaged_moment_uuid");

CREATE  INDEX "idx_image_references__url"
	ON "image_references"("url");

CREATE  INDEX "idx_imaged_moment__video_reference_uuid"
	ON "imaged_moments"("video_reference_uuid");

CREATE  INDEX "idx_imaged_moments__elapsed_time"
	ON "imaged_moments"("elapsed_time_millis");

CREATE  INDEX "idx_imaged_moments__recorded_timestamp"
	ON "imaged_moments"("recorded_timestamp");

CREATE  INDEX "idx_imaged_moments__timecode"
	ON "imaged_moments"("timecode");

CREATE  INDEX "idx_observations__concept"
	ON "observations"("concept");

CREATE  INDEX "idx_observations__imaged_moment_uuid"
	ON "observations"("imaged_moment_uuid");

CREATE  INDEX "idx_video_reference_information__video_reference_uuid"
	ON "video_reference_information"("video_reference_uuid");


-- JPA Fix for UUIDs on Postgres - https://www.eclipse.org/forums/index.php?t=msg&th=1073632&goto=1719530&#msg_1719530
CREATE CAST (varchar AS uuid)
  WITH INOUT
  AS IMPLICIT;
-- drop cast if exists (character varying as uuid);
-- create or replace function uuid(_text character varying) returns uuid language sql as 'select uuid_in(_text::cstring)';
-- create cast (character varying as uuid) with function uuid(character varying) as assignment;

-- FIX To allow cast of smallint to boolean for database migration
-- CREATE OR REPLACE FUNCTION boolean1(i smallint) RETURNS boolean AS $$
--     BEGIN
--             RETURN (i::smallint)::int::bool;
--     END;
-- $$ LANGUAGE plpgsql;
--
-- CREATE CAST (smallint AS boolean) WITH FUNCTION boolean1(smallint) AS ASSIGNMENT;

-- AUDITING
-- create sequence REVINFO_SEQ start with 1 increment by 50;
-- create table REVINFO (REV integer not null, REVTSTMP bigint, primary key (REV));
create table associations_AUD (REV integer not null, REVTYPE smallint, observation_uuid uuid, uuid uuid not null, mime_type varchar(64), link_name varchar(128), to_concept varchar(128), link_value varchar(1024), primary key (REV, uuid));
create table observations_AUD (REV integer not null, REVTYPE smallint, duration_millis bigint, observation_timestamp timestamp(6) with time zone, imaged_moment_uuid uuid, uuid uuid not null, activity varchar(128), observation_group varchar(128), observer varchar(128), concept varchar(256), primary key (REV, uuid));
alter table if exists associations_AUD add constraint fk_associations_aud__revinfo foreign key (REV) references REVINFO;
alter table if exists observations_AUD add constraint fk_observations_aud_refinfo foreign key (REV) references REVINFO;