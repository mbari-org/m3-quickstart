/*
Script generated by Aqua Data Studio 22.1.2 on Feb-26-2022 11:30:37 AM
Database: M3_ANNOTATIONS
Schema: dbo
Objects: TABLE, VIEW, INDEX
*/
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";


CREATE TABLE "imaged_moments"  ( 
	"uuid"             	      uuid PRIMARY KEY NOT NULL DEFAULT uuid_generate_v4(),
	"video_reference_uuid"  	uuid NOT NULL,
	"elapsed_time_millis"   	numeric(19,0) NULL,
	"recorded_timestamp"    	timestamp NULL,
	"timecode"              	varchar(255) NULL,
	"last_updated_timestamp"	timestamp NOT NULL DEFAULT now());

CREATE TABLE "ancillary_data"  ( 
	"uuid"             	          uuid PRIMARY KEY NOT NULL DEFAULT uuid_generate_v4(),
	"imaged_moment_uuid"         	uuid NOT NULL,
	"altitude"                   	real NULL,
	"coordinate_reference_system"	varchar(32) NULL,
	"depth_meters"               	real NULL,
	"latitude"                   	double precision NULL,
	"longitude"                  	double precision NULL,
	"oxygen_ml_per_l"            	real NULL,
	"phi"                        	double precision NULL,
	"xyz_position_units"         	varchar(255) NULL,
	"pressure_dbar"              	real NULL,
	"psi"                        	double precision NULL,
	"salinity"                   	real NULL,
	"temperature_celsius"        	real NULL,
	"theta"                      	double precision NULL,
	"x"                          	double precision NULL,
	"y"                          	double precision NULL,
	"z"                          	double precision NULL,
	"light_transmission"         	real NULL,
	"last_updated_timestamp"     	timestamp NOT NULL DEFAULT now(),
	CONSTRAINT fk_ancillary_data__imaged_moments 
	  FOREIGN KEY(imaged_moment_uuid) 
		REFERENCES imaged_moments("uuid"));

CREATE TABLE "observations"  ( 
	"uuid"                  	uuid PRIMARY KEY NOT NULL DEFAULT uuid_generate_v4(),
	"imaged_moment_uuid"    	uuid NOT NULL,
	"activity"              	varchar(128) NULL,
	"concept"               	varchar(256) NULL,
	"duration_millis"       	numeric(19,0) NULL,
	"observation_group"     	varchar(128) NULL,
	"observation_timestamp" 	timestamp NULL,
	"observer"              	varchar(128) NULL,
	"last_updated_timestamp"	timestamp NOT NULL DEFAULT now(),
	CONSTRAINT fk_observations__imaged_moments 
	  FOREIGN KEY(imaged_moment_uuid) 
		REFERENCES imaged_moments("uuid"));

CREATE TABLE "associations"  ( 
	"uuid"             	      uuid PRIMARY KEY NOT NULL DEFAULT uuid_generate_v4(),
	"observation_uuid"      	uuid NOT NULL,
	"link_name"             	varchar(128) NOT NULL,
	"link_value"            	varchar(1024) NULL,
	"to_concept"            	varchar(128) NULL,
	"mime_type"             	varchar(64) NOT NULL,
	"last_updated_timestamp"	timestamp NOT NULL DEFAULT now(),
	CONSTRAINT fk_associations__observations 
	  FOREIGN KEY(observation_uuid) 
		REFERENCES observations("uuid"));

CREATE TABLE "image_references"  ( 
	"uuid"             	      uuid PRIMARY KEY NOT NULL DEFAULT uuid_generate_v4(),
	"imaged_moment_uuid"    	uuid NOT NULL,
	"description"           	varchar(256) NULL,
	"format"                	varchar(64) NULL,
	"height_pixels"         	integer NULL,
	"url"                   	varchar(1024) NOT NULL,
	"width_pixels"          	integer NULL,
	"last_updated_timestamp"	timestamp NOT NULL DEFAULT now(),
	UNIQUE("url"),
	CONSTRAINT fk_image_references__imaged_moments 
	  FOREIGN KEY(imaged_moment_uuid) 
		REFERENCES imaged_moments("uuid"));

CREATE TABLE "video_reference_information"  ( 
	"uuid"                  	uuid PRIMARY KEY NOT NULL DEFAULT uuid_generate_v4(),
	"video_reference_uuid"  	uuid NOT NULL,
	"mission_contact"       	varchar(64) NULL,
	"mission_id"            	varchar(256) NOT NULL,
	"platform_name"         	varchar(64) NOT NULL,
	"last_updated_timestamp"	timestamp NOT NULL DEFAULT now());


CREATE  INDEX "idx_ancillary_data__imaged_moment_uuid"
	ON "ancillary_data"("imaged_moment_uuid");

CREATE  INDEX "idx_associations__link_name"
	ON "associations"("link_name");

CREATE  INDEX "idx_associations__to_concept"
	ON "associations"("to_concept");

CREATE  INDEX "idx_associations__link_value"
	ON "associations"("link_value");

CREATE  INDEX "idx_associations__observation_uuid"
	ON "associations"("observation_uuid");

CREATE  INDEX "idx_image_references__imaged_moment_uuid"
	ON "image_references"("imaged_moment_uuid");

CREATE  INDEX "idx_image_references__url"
	ON "image_references"("url");

CREATE  INDEX "idx_imaged_moment__video_reference_uuid"
	ON "imaged_moments"("video_reference_uuid");

CREATE  INDEX "idx_imaged_moments__elapsed_time"
	ON "imaged_moments"("elapsed_time_millis");

CREATE  INDEX "idx_imaged_moments__recorded_timestamp"
	ON "imaged_moments"("recorded_timestamp");

CREATE  INDEX "idx_imaged_moments__timecode"
	ON "imaged_moments"("timecode");

CREATE  INDEX "idx_observations__concept"
	ON "observations"("concept");

CREATE  INDEX "idx_observations__imaged_moment_uuid"
	ON "observations"("imaged_moment_uuid");

CREATE  INDEX "idx_video_reference_information__video_reference_uuid"
	ON "video_reference_information"("video_reference_uuid");

-- JPA Fix for UUIDs on Postgres - https://www.eclipse.org/forums/index.php?t=msg&th=1073632&goto=1719530&#msg_1719530
drop cast if exists (character varying as uuid);
create or replace function uuid(_text character varying) returns uuid language sql as 'select uuid_in(_text::cstring)';
create cast (character varying as uuid) with function uuid(character varying) as assignment;

-- FIX To allow cast of smallint to boolean for database migration
CREATE OR REPLACE FUNCTION boolean1(i smallint) RETURNS boolean AS $$
    BEGIN
            RETURN (i::smallint)::int::bool;
    END;
$$ LANGUAGE plpgsql;

CREATE CAST (smallint AS boolean) WITH FUNCTION boolean1(smallint) AS ASSIGNMENT;

CREATE VIEW "annotations"
AS
    SELECT
        im.uuid AS imaged_moment_uuid,
        im.elapsed_time_millis AS index_elapsed_time_millis,
        im.recorded_timestamp AS index_recorded_timestamp,
        im.timecode AS index_timecode,
        obs.uuid AS observation_uuid,
        obs.activity,
        obs.concept,
        obs.duration_millis,
        obs.observation_group,
        obs.observation_timestamp,
        obs.observer,
        ir.uuid AS image_reference_uuid,
        ir.description AS image_description,
        ir.format AS image_format,
        ir.height_pixels AS image_height,
        ir.width_pixels AS image_width,
        ir.url AS image_url,
        ass.link_name,
        ass.link_value,
        ass.to_concept,
        ass.mime_type AS association_mime_type,
        ass.link_name || ' | ' || ass.to_concept || ' | ' || ass.link_value AS associations,
        ad.altitude,
        ad.coordinate_reference_system,
        ad.depth_meters,
        ad.latitude,
        ad.longitude,
        ad.oxygen_ml_per_l,
        ad.phi,
        ad.xyz_position_units,
        ad.pressure_dbar,
        ad.psi,
        ad.salinity,
        ad.temperature_celsius,
        ad.theta,
        ad.x,
        ad.y,
        ad.z,
        ad.light_transmission,
        vr.uuid AS video_reference_uuid,
        vr.audio_codec,
        vr.container AS video_container,
        vr.description AS video_reference_description,
        vr.frame_rate,
        vr.height AS video_height,
        vr.sha512 AS video_sha512,
        vr.size_bytes AS video_size_bytes,
        vr.uri AS video_uri,
        vr.video_codec,
        vr.width AS video_width,
        v.description AS video_description,
        v.duration_millis AS video_duration_millis,
        v.name AS video_name,
        v.start_time AS video_start_timestamp,
        vs.camera_id,
        vs.description AS video_sequence_description,
        vs.name AS video_sequence_name,
        info.mission_contact AS chief_scientist,
        info.mission_id AS dive_number,
        info.platform_name AS camera_platform
    FROM
        imaged_moments im
        LEFT JOIN observations obs ON obs.imaged_moment_uuid = im.uuid
        LEFT JOIN image_references ir ON ir.imaged_moment_uuid = im.uuid
        LEFT JOIN associations ass ON ass.observation_uuid = obs.uuid
        LEFT JOIN ancillary_data  ad ON ad.imaged_moment_uuid = im.uuid
        LEFT JOIN video_references vr ON vr.uuid = im.video_reference_uuid
        LEFT JOIN videos v ON v.uuid = vr.video_uuid
        LEFT JOIN video_sequences vs ON vs.uuid = v.video_sequence_uuid
        LEFT JOIN video_reference_information info ON info.video_reference_uuid = im.video_reference_uuid;

